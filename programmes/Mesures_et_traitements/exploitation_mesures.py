# -*- coding: utf-8 -*-
"""
Created on Wed Mar 27 16:08:19 2013

@author: E68972
"""
from __future__ import division
from numpy import *
from scipy.special import gamma as Gamma


Bleu= "#0084d1"
Vert= "#008000"
Rouge= "#c5000b"
Jaune= "#ffd320"
Noir= "#000000"

OrangeEDF="#fe5815"
OrangeclairEDF="#ffa02f"
VertclairEDF="#c4d600"
VertEDf="#509e2f"
BleuclairEDF="#005bbb"
BleuEDF="#001a70"


axe=1
def Susceptibility(filename,level,moyen,bande):
    result=load(filename)
    angles=result['Angles']
    consigne=result['Champconsigne']
    niveauxconsigne=consigne[0,0,:]
    f=result['f']
    champ=result['Champ']
    Susc=ones((10,len(f),len(niveauxconsigne)))    
    niveauxEz=zeros((10,len(f)))
    
    for i in range(0,10): #boucle sur les positions du mat
        for j in range(0,len(f)): #boucle sur les fréquences
            for k in range(0,len(niveauxconsigne)): #boucle sur les puissances injectées
                if (champ[i,j,k,axe]<level):
                    Susc[i,j,k]=0
                    niveauxEz[i,j]=niveauxconsigne[k]
    niv=mean(consigne[:,:,:],axis=0)
    prob=mean(Susc,axis=0)
    mask=(ones_like(prob)*(prob>0.6))
    mprob = ma.masked_array(prob,mask)
    if moyen=='ca':
        #if bande=='bf':
        Es=(2*niv*(log(1/mprob)/pi)**(1/2)).min(axis=1)
            #Es=(sqrt(2)*niv*(log(1/mprob)/pi)**(1/2)).min(axis=1)
        #else:
            #Es=(2*niv*(log(1/mprob)/pi)**(1/2)).min(axis=1)
    if moyen=='crbm':
        Es=(2*niv*sqrt(log(1/mprob)/pi)).mean(axis=1)
        #Es=(niv/Gamma(1+1/2)*sqrt(log(1/mprob))).mean(axis=1)
    return f,Es

level=10
fca82,Esca82=Susceptibility('essai_CA_0.8-2_rapide.npz',level,'ca','bf')
fca24,Esca24=Susceptibility('essai_CA_2-4_rapideb.npz',level,'ca','bf')    
fcrbm82,Escrbm82=Susceptibility('essai_CRBM_0.8-2_rapideb.npz',level,'crbm','hf')  
fcrbm24,Escrbm24=Susceptibility('essai_CRBM_2-4_rapideb.npz',level,'crbm','hf')  

fig=figure(num=1,figsize=(10,7))
subplot(211)
plot(fca82/1e6,Esca82,OrangeEDF,label=r'$E_{s_{CA}}$')
plot(fca24/1e6,Esca24,OrangeEDF)
plot(fcrbm82/1e6,Escrbm82,Bleu,label=r'$E_{s_{CRBM}}$')
plot(fcrbm24/1e6,Escrbm24,Bleu)
ylabel('V/m')
grid('on')
xlim(800,4000)
legend(loc=0)
subplot(212)
plot(fca82/1e6,(Esca82/Escrbm82),'k+')
plot(fcrbm24/1e6,(Esca24/Escrbm24),'k+')
grid('on')
xlim(800,4000)
xlabel(r'$f$/MHz')
ylabel(r'$E_{s_{CA}}/E_{s_{CRBM}}$')
fig.savefig('mesures.pdf',bbox='tight')


fig2=figure(num=2,figsize=(10,5))
plot(fca82/1e6,Esca82,OrangeEDF,label=r'$E_{s_{CA}}$')
plot(fca24/1e6,Esca24,OrangeEDF)
plot(fcrbm82/1e6,Escrbm82,Bleu,label=r'$E_{s_{CRBM}}$')
plot(fcrbm24/1e6,Escrbm24,Bleu)
xlabel(r'$f$/MHz')
ylabel('V/m')
grid('on')
xlim(800,4000)
ylim(0,200)
legend(loc=0)
fig2.savefig('mesures_a10.pdf',bbox='tight')

fig3=figure(num=3,figsize=(10,5))
plot(fca82/1e6,(Esca82/Escrbm82),BleuEDF,'+')
plot(fcrbm24/1e6,(Esca24/Escrbm24),BleuEDF,'+')
grid('on')
xlim(800,4000)
ylim(0,3.5)
xlabel(r'$f$/MHz')
ylabel(r'$E_{s_{CA}}/E_{s_{CRBM}}$')
fig3.savefig('mesures_b10.pdf',bbox='tight')
